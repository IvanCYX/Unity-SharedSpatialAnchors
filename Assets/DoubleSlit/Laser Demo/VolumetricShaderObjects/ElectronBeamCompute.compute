#pragma kernel CSMain

#define PI 3.14159265
#define Epsilon 0.001
#define MaxForce 100

static const int threadCount = 1024;

uint _ParticleCount;
uint _ExternalChargeCount;

StructuredBuffer<float3> _Position;
RWStructuredBuffer<float3> _Velocity;
StructuredBuffer<float4> _ExternalCharge;

float InverseLerp(float a, float b, float v) {return (v-a)/(b-a);}
float Remap(float iMin, float iMax, float oMin, float oMax, float v) {float t = InverseLerp(iMin, iMax, v); return lerp(oMin, oMax, t);}

float3 calculateForceFromElectronElectricInteraction(float3 electron1Position, float3 electron2Position) {
    float3 r = electron1Position - electron2Position;
    float rMag = length(r);

    if(rMag <= Epsilon) {
        return float3(0,0,0);
    } else {
        return (1.0/(rMag * rMag)) * normalize(r);
    }
}

float3 calculateForceFromElectronMagneticInteraction(float3 electron1Position, float3 electron1Velocity, float3 electron2Position, float3 electron2Velocity) {
    float3 r = electron1Position - electron2Position;
    float rMag = length(r);

    if(rMag <= Epsilon) {
        return float3(0,0,0);
    } else {
        float3 B = cross(electron2Velocity, normalize(r)) / (rMag * rMag);
        return cross(electron1Velocity, B);
    }
}

float3 calculateForceFromExternalCharge(float3 electronPosition) {
    float3 netForce = 0;
    
    for(uint i = 0; i <= _ExternalChargeCount; i++) {
        float3 r = electronPosition - _ExternalCharge[i].xyz;
        float rMag = length(r);

        if(rMag <= Epsilon) continue;

        netForce += (-_ExternalCharge[i].w/(rMag * rMag)) * normalize(r); 
    } 

    return netForce;
}

[numthreads(threadCount,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID) { 
    if(id.x < _ParticleCount) {
        for(uint i = 0; i < _ParticleCount; i++) {
            _Velocity[id.x] += 0.0000005 * calculateForceFromElectronMagneticInteraction(_Position[id.x], _Velocity[id.x], _Position[i], _Velocity[i]);
            _Velocity[id.x] += 0.000001 * calculateForceFromElectronElectricInteraction(_Position[id.x], _Position[i]);
        }
        //_Velocity[id.x] += 0.01 * calculateForceFromExternalCharge(_Position[id.x]);
    }
}
