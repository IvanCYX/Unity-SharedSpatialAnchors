#pragma kernel CSMain

static const float PI = 3.14159265f;
static const int threadCount = 1024;

uint _ParticleCount;
float _Current;

StructuredBuffer<float3> _Position;
RWStructuredBuffer<float3> _Field;

float InverseLerp(float a, float b, float v) {return (v-a)/(b-a);}
float Remap(float iMin, float iMax, float oMin, float oMax, float v) {float t = InverseLerp(iMin, iMax, v); return lerp(oMin, oMax, t);}

float3 calculateMagneticField(float3 radialVector) {
    float3 magneticField = float3(0,0,0);

    for(int j = 0; j < 20; j++) {
        for(int i = 0; i < 50; i++) {
            float3 chargePosition = float3(0,0,1) * cos(Remap(0, 50, 0, PI * 2, i)) + float3(0,1,0) * sin(Remap(0, 50, 0, PI * 2, i)) + float3(1,0,0) * Remap(0,20,-2,2,j);
            float3 r = radialVector - chargePosition;
            float3 v = normalize(cross(float3(1,0,0),chargePosition)) * _Current;
            magneticField += 0.01 * cross(v,-normalize(r)) / (length(r) * length(r));
        }
    } 

    return magneticField;
} 

[numthreads(threadCount,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID) { 
    if(id.x < _ParticleCount) {
        _Field[id.x] = calculateMagneticField(_Position[id.x]);
    }
}
